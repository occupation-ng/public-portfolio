Qubes
Last updated 20220515
https://www.qubes-os.org/
A Reasonably Secure Operating System
System Requirements
QubesOS has strong hardware requirements: https://www.qubes-os.org/doc/system-requirements/
Check for compatibility with your specific hardware: https://www.qubes-os.org/hcl/
Minimum Requirements
RAM
4G is the defined minimum.  
8G is serviceable, but will max at 2-3 Qubes.
More than 8G will improve ease of use.
Hardware Compatibility
Virtualization
Ensure that both your CPU and your Motherboard’s Chipset support IOMMU/VT-d/AMD-Vi.
For example the Intel Core i3 processor has VT-d (Virtualization Technology for Directed I/O) support: https://www.intel.com/content/www/us/en/products/sku/209735/intel-core-i31125g4-processor-8m-cache-up-to-3-70-ghz-with-ipu/specifications.html
; but is unable to use VT-d when paired with the H-Joshua-H61-uATX (Joshua) motherboard, which uses a Intel-H61 chipset without VT-d support: https://ark.intel.com/content/www/us/en/ark/products/52806/intel-h61-express-chipset.html
VT vs VT-d
Ensure that your chipset supports Intel VT-d. specifically Intel VT is incompatible with Qubes.  
For example, Intel X58 chipset supports Intel Virtualization Technology (Intel VT) and Intel Virtualization Technology for Directed IO (Intel VT-d) but when paired with certain motherboards and their accompanying BIOS can fail to support Intel VT-d and so will fail to run Qubes.
WLAN
Qubes struggles with some PCI WLAN Cards.  Specifically, Broadcom’s. Causing system wide freezes.  Check the WLAN card to ensure compatability.
Installation
Get the release you want: https://www.qubes-os.org/downloads/
USB
VFAT
It is best to use the VFAT file system.  Compatible with the FAT file system family but allows files larger than 4G.
Make the drive’s filesystem be VFAT.
$ sudo mkfs.vfat -I /dev/<YOUR_DEVICE>
Use  dd to copy the contents of the ISO to the disk.
$ sudo dd if=Qubes-RX-x86_64.iso of=/dev/sdY status=progress bs=1048576 && sync
FAT32
It is recommended to have an 8G drive due to the FAT32 file system but if using a larger drive ensure the final partition is less than 8G.
Make the drive’s file system be FAT32.
$ sudo mkfs.fat -I /dev/<YOUR_DEVICE>
Use  dd to copy the contents of the ISO to the disk.
$ sudo dd if=Qubes-RX-x86_64.iso of=/dev/sdY status=progress bs=1048576 && sync
Troubleshooting
Freeze On Install Or Startup
Try disabling WLAN in the BIOS.  Qubes struggles with some PCI WLAN Cards.  Specifically, Broadcom’s.  If the install succeeds with WLAN disabled, try buying a different brand of PCI WLAN Card.  Intel WLAN PCI card worked fine.
Modifying /EFI/BOOT/BOOT64.cfg
Plug in the installation media, unmount if is automatically mounted, then mount only the second partition.
Edit /EFI/BOOT/BOOT64.cfg with any editor: vim, nano, et al.
Blank Screen Before Loading Installer
Some hardware may freeze before loading the installer.  
Try commenting some of the default configuration values from BOOT64.cfg.
[qubes-verbose]
options=console=vga efi=attr=uc
# noexitboot=1
# mapbs=1
kernel=vmlinuz inst.stage2=hd:LABEL=Qubes-R4.0-x86_64 i915.alpha_support=1
ramdisk=initrd.img
 https://www.qubes-os.org/doc/uefi-troubleshooting/#removing-noexitboot-and-mapbs

Example Base Setup
Setup
Clone the default Templates to create ad-hoc base-* Templates to ensure the default Templates remain unaltered.
Apply all persistent installs in the base-* Template clones.
This leaves the original Templates as “factory resets” of the base-* clones.
Qubes
DEV
Clone base-  Template to make new Qubes.
Create a dev Qube
 In the Base
Install Development Software
dnf install emacs libreoffice java-11-openjdk-devel nodejs rust cargo haskell-package feh sqlite postgresql-server postgresql-contrib go
emacs : development editor
libreoffice : FOSS office suite
java-11-openjdk-devel : for clj/cljs 
nodejs  : for shadow-cljs
rust cargo : rust-lang tooling
haskell-package : haskell-lang tooling
golang: The Go programming language and toolset
feh : lightweight cli image view
sqlite : lightweight sql db
postgresql-server postgresql-contrib  : postgres SQL db
lean : https://leanprover-community.github.io/install/linux.html
NOTE use: $ dnf history userinstalled or $ dnf history list all  ; for a list of all installed package’s histories.

In the Qube
Make a .local/bin:
$ mkdir /home/user/.local/bin 
Add .local/bin to PATH in bash_profile:
$ vim /home/user/.bash_profile
export PATH=$PATH:/home/user/.local/bin 

Install python virtualenv to allow for isolated python environments:
$ python3 -m pip install virtualenv
$ mkdir /home/user/venv
	USE	
		To create a new python environment:
$ virtualenv /home/user/venv/ci 
		To enter that environment:
$ source /home/user/venv/ci/bin/activate
(ci)$ 
		To exit the environment:
(ci)$ deactivate
$ 
Install the black python code formatter into a CI environment:
$ virtualenv /home/user/venv/ci
..
$ source /home/user/venv/ci/bin/activate
(ci)$ python3 -m pip install black
	USE	
		To format python:
$ black /PATH/TO/CODE.py 

ENT
Clone a Default Template to make a base-ent Template.
Create an ent Qube with the base-ent Template.
 In the Base
Install Entertainment Software

Enable RPMFusion:

$ sudo dnf config-manager --set-enabled rpmfusion-free
$ sudo dnf config-manager --set-enabled rpmfusion-free-updates
$ sudo dnf config-manager --set-enabled rpmfusion-nonfree
$ sudo dnf config-manager --set-enabled rpmfusion-nonfree-updates
$ sudo dnf upgrade –refresh

$ sudo dnf install ffmpeg vlc
ffmpeg : video editing software
vlc : high compatibility video player
USB
https://www.qubes-os.org/doc/usb-qubes/
USB WiFi
The easiest way to use WiFi via USB is to select this option when installing the system:
[x] Use sys-net qube for both networking and USB devices
USB Keyboard
To reset the Manual Setup delete everything from /etc/qubes-rpc/policy/qubes.InputKeyboard in dom0.
Then add one line: $anyvm $anyvm deny
Manual setup for USB keyboards
In order to use a USB keyboard, you must first attach it to a USB qube, then give that qube permission to pass keyboard input to dom0. Edit the qubes.InputKeyboard policy file in dom0, which is located here:
/etc/qubes-rpc/policy/qubes.InputKeyboard
Add a line like this one to the top of the file:
sys-usb dom0 allow
(Change sys-usb to your desired USB qube.)
You can now use your USB keyboard to log in to your dom0 user account (after LUKS decryption).
You can set up your system so that there’s a confirmation prompt each time the USB keyboard is connected. However, this will effectively disable your USB keyboard for dom0 user account login and the screen locker, so don’t do this if you want to log into and unlock your device with a USB keyboard! If you’re sure you wish to proceed, change the previous line to:
sys-usb dom0 ask,default_target=dom0
If you wish to use a USB keyboard to enter your LUKS passphrase, you cannot hide its USB controller from dom0. If you’ve already hidden that USB controller from dom0, you must revert the procedure by removing the rd.qubes.hide_all_usb option and employ an alternative strategy for protecting your system by physically disconnecting other devices during startup.
Qubes 4.1 only: You should also add the usbcore.authorized_default=0 option, which prevents the initialization of non-input devices. (Qubes ships with a USBGuard configuration that allows only input devices when usbcore.authorized_default=0 is set.)
Hot Keys
https://groups.google.com/g/qubes-users/c/eqp_hyOP6BM
Ctrl+Enter --> qvm-run-in-focused-vm xterm 
Ctrl+Shift+Enter --> qvm-run-in-focused-vm nautilus 
Ctrl+Shift+W --> qvm-run-in-focused-vm "sudo poweroff" 
1) Open xterm in dom0 
2) Type "cd /home/USERNAME/Documents" and hit enter if you want your script to be saved there. 
3) Type "nano Screenshot.sh" and press enter. 
4) Type the following script: 

#!/bin/bash 
ID=`xdotool getwindowfocus` 
QUBE=`xprop _QUBES_VMNAME -id $ID|cut -f2 -d\" ` 
if [[ "$QUBE" == "_QUBES_VMNAME: not found." ]]; then 
exit 
else 

fi 

5) Press Ctrl+x, then y, then Enter. 
6) Make the script executable by typing "chmod +x /home/USERNAME/Documents/Screenshot.sh" and pressing Enter. 
7) Open System Tools > Keyboard > Application Shortcuts (this works in this way as long as you don't have the KDE desktop installed in dom0). Click "add". Type the path to your script: /home/USERNAME/Documents/Screenshot.sh 
Click "OK" and press a keyboard shortcut. 
8) Now you are able to invoke the screenshot tool with your keyboard shortcut in the Qube you are working with and drag a frame with the mouse over what you want to take a picture of.* The pictures will be automatically saved in the folder "Pictures" in the home directory of the Qube. 

*If you want the whole screen to be photographed automatically instead, change the line "qvm-run $QUBE "gnome-screenshot -a" to "qvm-run $QUBE "gnome-screenshot" You can find out more possibilities in the terminal of the Qube with the command "gnome-screenshot --help". 

If it does not work, the program "gnome-screenshot" is not installed. Open a terminal of the template and install the program with "sudo dnf install gnome-screenshot" if it is a normal fedora template. If it is a Debian template, type "sudo apt-get install gnome-screenshot". After installation, shut down the template and restart the Qubes based on the template. 
