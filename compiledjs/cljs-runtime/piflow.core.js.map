{"version":3,"sources":["piflow/core.cljs"],"mappings":";AASA,AAAA,sBAAA,8BAAAA,pDAAMM;AAAN,AAAA,IAAAL,qBAAA;AAAA,AAAA,IAAAC,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAAD,wBAAA,CAAA,UAAAE;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,EAAA,CAAA,MAAA,AAAAH,4BAAA,AAAA,KAAAI,qBAAA,AAAAJ,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAAK,yDAAA,CAAA,UAAA,MAAAF;;;AAAA,AAAA,CAAA,2DAAA,3DAAME,sEAASM,UAAYC;AAA3B,AACE,OAACC,uBAAiB,AAACC,wDAAaH,4DAAUC;;;AAD5C,CAAA,8CAAA,9CAAMP;;AAAN;AAAA,CAAA,wCAAA,WAAAC,nDAAMD;AAAN,AAAA,IAAAE,WAAA,AAAAC,gBAAAF;IAAAA,eAAA,AAAAG,eAAAH;AAAA,AAAA,IAAAI,qBAAA;AAAA,AAAA,OAAAA,wDAAAH,SAAAD;;;AAAA,AAGA,8BAAA,9BAAMS,oEACHC;AADH,AAEE,IAAMC,UAAQ,AAACC,sBAAgBF;IACzBG,UAAQ,AAACC,SAAY,AAACC,eAAK,2DAAA,3DAACC,mDAAWL;AAD7C,AAEE,GAAM,GAAK,uCAAA,vCAACM,+BAAeN;AAA3B,AACE,AAACO,yBAAmB,AAACJ,SAAYD;;AADnC;;AAEA,QAAA,PAAMM,4BAA4B,AAACC,+CAAO,AAAmBD,uBAAW,AAACE,gDAAQV;;AACjF,OAACW;;AAEL,gCAAA,hCAAMC,wEACHb;AADH,AAEE,IAAMC,UAAQ,sBAAA,tBAAeQ,oBAAUT;IACjCG,UAAQ,AAACC,SAAY,AAACC,eAAK,2DAAA,3DAACC,mDAAWL;AAD7C,AAEE,AAACO,yBAAmB,AAACJ,SAAYD;;AACjC,OAACW,uBAAiBX;;AAEtB,2BAAA,3BAAMY,8DACHC,MAAMf,QAAQgB;AADjB,AAEE,IAAAC,aAAA,2GAAA,xBAAe,AAASF,YACT,AAASA;QADxB,AAAAG,4CAAAD,WAAA,IAAA,/DAAOE;QAAP,AAAAD,4CAAAD,WAAA,IAAA,/DAASG;QAAT,AAAAF,4CAAAD,WAAA,IAAA,/DAAWI;IAGLC,aAAW,AAAmBd;AAHpC,AAIE,eAAA,PAAMA,4BAA4B,AAACe,8CAAMD,WAAW,AAACZ,gDAAQV,SAAS,yDAAA,mDAAA,5GAACuB,8CAAMP,iJAAiBG,EAAEC,EAAEC;;AAEtG,6BAAA,7BAAMG,kEACHzB;AADH,AAEE,IAAMC,UAAQ,sBAAA,tBAAeQ,oBAAUT;IACjCiB,aAAW,iBAAAS,WAAmB,AAAmBjB;IAAtCkB,eAAC,AAAChB,gDAAQV;AAAV,AAAA,QAAA0B,6CAAAA,2CAAAD,YAAAC,uBAAAD;;IACXvB,UAAQ,AAACE,eAAK,2DAAA,3DAACC,mDAAWL;AAFhC,AAGE,GAAM,AAAC2B,cAAI,AAACC,MAAS,AAACxB,eAAKJ;AAA3B,AACE,AACE,AAACc,yBAAaf,EAAEC,QAAQgB;;AACxB,AAACL;;AAHL;;AAMA,AAACJ,yBAAmB,AAACJ,SAAYD;;AACjC,OAACW,uBAAiBX;;AAEtB,mBAAA,nBAAM2B;AAAN,AAAc,gEAAA,0EAAA,GAAA,mCAAA,zKAACC;;AAEf,8BAAA,9BAAMC,oEAAiBC;AAAvB,AACE,sBAAA,fAACC,YAAeD","names":["var_args","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","piflow.core/animate","seq43584","G__43585","cljs.core/first","cljs.core/next","self__5754__auto__","page-name","args","piflow.dom/update-flux","piflow.util.invoke","piflow.core/global-close-fn","e","pane-id","piflow.ui/get-pane-id","id-numb","js/parseInt","cljs.core/last","clojure.string.split","clojure.string/includes?","piflow.home/remove-lines","js/window","cljs.core.dissoc","cljs.core.keyword","piflow.home/update-pane-flow-graph","piflow.core/global-mouseup-fn","piflow.home/draw-lines","piflow.core/update-graph","event","pane-graph","vec__43589","cljs.core.nth","x","y","z","flow-graph","cljs.core.assoc","piflow.core/global-move-fn","G__43594","fexpr__43593","cljs.core/not","js/isNaN","piflow.core/draw","piflow.core.animate","piflow.core/start-animation","fn","js/setInterval"],"sourcesContent":["(ns piflow.core\n  (:require\n   [piflow.home :as phome]\n   [piflow.ui :as pui]\n   [piflow.util :as putil]\n   [piflow.dom :as pdom]\n   [clojure.edn :as cedn]\n   [clojure.string :as cstr]))\n\n(defn animate [page-name & args]\n  (pdom/update-flux (putil/invoke page-name args)))\n\n(defn global-close-fn\n  [e]\n  (let [pane-id (pui/get-pane-id e)\n        id-numb (js/parseInt (last (cstr/split pane-id \"_\")))]\n    (when (not (cstr/includes? pane-id \"EDIT\"))\n      (phome/remove-lines (js/parseInt id-numb))) ;; int: SUCC\n    (aset js/window \"GLOB_flow_graph\" (dissoc (.-GLOB_flow_graph js/window) (keyword pane-id)))\n    (phome/update-pane-flow-graph))) ;; removing flow\n\n(defn global-mouseup-fn\n  [e]\n  (let [pane-id (.get_match_id js/window e \"pane\")\n        id-numb (js/parseInt (last (cstr/split pane-id #\"_\")))]\n    (phome/remove-lines (js/parseInt id-numb)) ;; int: SUCC\n    (phome/draw-lines id-numb)))\n\n(defn update-graph\n  [event pane-id pane-graph]\n  (let [[x y z] [(.-pageX event)\n                 (.-pageY event)\n                 200];(.-zIndex event)]\n        flow-graph (.-GLOB_flow_graph js/window)]\n    (aset js/window \"GLOB_flow_graph\" (assoc flow-graph (keyword pane-id) (assoc pane-graph :pos [x y z])))))\n\n(defn global-move-fn\n  [e]\n  (let [pane-id (.get_match_id js/window e \"pane\")\n        pane-graph ((keyword pane-id) (.-GLOB_flow_graph js/window))\n        id-numb (last (cstr/split pane-id \"_\"))]\n    (when (not (js/isNaN (last pane-id))) ;; pane_flow_17 pass, pane_flow_17_EDIT block\n      (do\n        (update-graph e pane-id pane-graph)\n        (phome/update-pane-flow-graph)))\n    ;(phome/remove-lines pane-id) ;; full: FAIL\n    ;(phome/remove-lines id-numb) ;; string: FAIL\n    (phome/remove-lines (js/parseInt id-numb)) ;; int: SUCC\n    (phome/draw-lines id-numb)))\n\n(defn draw [] (animate \"piflow.home/page-home\" \"\" {} []))\n;; loop redraw dom elements\n(defn start-animation [fn] ;; 1000 ms == 1s\n  (js/setInterval fn 1000))\n;;(start-animation draw) ;; fn should be argless?\n"]}