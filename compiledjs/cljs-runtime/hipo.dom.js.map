{"version":3,"sources":["hipo/dom.cljs"],"mappings":"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","names":["hipo.dom/create-element","namespace-uri","tag","js/document","hipo.dom/node?","o","js/Node","hipo.dom/element?","el","hipo.dom/text-element?","js/Error","hipo.dom/child","i","var_args","G__20944","hipo.dom/children","hipo.dom.children","fel","cel","acc","nel","and__5043__auto__","cljs.core/count","cljs.core.conj","hipo.dom/replace!","hipo.dom/replace-text!","s","hipo.dom/clear!","hipo.dom/remove-trailing-children!","n","n__5636__auto__","_","hipo.dom/insert-child!","hipo.dom/remove-child!"],"sourcesContent":["(ns hipo.dom)\n\n(defn create-element [namespace-uri tag]\n  (if namespace-uri\n    (.createElementNS js/document namespace-uri tag)\n    (.createElement js/document tag)))\n\n(defn- node? [o] (instance? js/Node o))\n(defn- element? [el] (if el (identical? 1 (.-nodeType el))))\n(defn- text-element? [el] (if el (identical? 3 (.-nodeType el))))\n\n(defn child\n  [el i]\n  {:pre [(node? el) (not (neg? i))]}\n  (aget (.-childNodes el) i))\n\n(defn children\n  ([el] (children el 0))\n  ([el i]\n   {:pre [(node? el)\n          (not (neg? i))]}\n   (let [fel (.-firstChild el)]\n     (if fel\n       (loop [cel fel\n              acc [cel]]\n         (let [nel (.-nextSibling cel)]\n           (if (and (not (zero? (- (count acc) (inc i)))) nel)\n             (recur nel (conj acc nel))\n             acc)))))))\n\n(defn replace!\n  [el nel]\n  {:pre [(node? el) (node? nel)\n         (not (nil? (.-parentElement el)))]}\n  (.replaceChild (.-parentElement el) nel el))\n\n(defn replace-text!\n  [el s]\n  {:pre [(node? el) (string? s)]}\n  (if (text-element? el)\n    (set! (.-textContent el) s)\n    (replace! el (.createTextNode js/document s))))\n\n(defn clear!\n  [el]\n  {:pre [(element? el)]}\n  (set! (.-innerHTML el) \"\"))\n\n(defn remove-trailing-children!\n  [el n]\n  {:pre [(node? el) (not (neg? n))]}\n  (dotimes [_ n]\n    (.removeChild el (.-lastChild el))))\n\n(defn insert-child!\n  [el i nel]\n  {:pre [(node? el) (not (neg? i)) (node? nel)]}\n  (.insertBefore el nel (child el i)))\n\n(defn remove-child!\n  [el i]\n  {:pre [(node? el) (not (neg? i))]}\n  (.removeChild el (child el i)))\n"]}