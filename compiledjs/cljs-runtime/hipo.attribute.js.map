{"version":3,"sources":["hipo/attribute.cljc"],"mappings":";AAIA,+BAAA,2CAAA,wDAAA,2CAAA,qDAAA,gBAAA,kDAAA,WAAAA,iBAAAC,iBAAAC,iBAAAC,lWAAKC;AAAL,AAAiD,IAAAC,aAAA,AAAAC,cAAAH;IAAAI,eAAA;IAAAC,eAAA;IAAAC,WAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,WAAAD;AAAA,IAAAE,aAAA,AAAAH,kDAAAE;QAAA,AAAAE,4CAAAD,WAAA,IAAA,/DAASW;QAAT,AAAAV,4CAAAD,WAAA,IAAA,/DAAWY;AAAX,AAAA,AAAkB,CAAAtB,iBAAA,SAAiB,AAACuB,eAAKF,MAAGC;;AAA5C;AAAA,eAAAjB;eAAAE;eAAAC;eAAA,CAAAC,WAAA;;;;;;;AAAA,IAAAG,qBAAA,AAAAN,cAAAD;AAAA,AAAA,GAAAO;AAAA,AAAA,IAAAP,iBAAAO;AAAA,AAAA,GAAA,AAAAC,6BAAAR;AAAA,IAAAS,kBAAA,AAAAC,sBAAAV;AAAA,AAAA,eAAA,AAAAW,qBAAAX;eAAAS;eAAA,AAAAG,gBAAAH;eAAA;;;;;;;AAAA,IAAAI,aAAA,AAAAC,gBAAAd;QAAA,AAAAM,4CAAAO,WAAA,IAAA,/DAASG;QAAT,AAAAV,4CAAAO,WAAA,IAAA,/DAAWI;AAAX,AAAA,AAAkB,CAAAtB,iBAAA,SAAiB,AAACuB,eAAKF,MAAGC;;AAA5C;AAAA,eAAA,AAAAF,eAAAf;eAAA;eAAA;eAAA;;;;;;;;AAAA;;;;;;AAEjD,oDAAA,pDAAOmB,gHAAiCC;AAAxC,AAA2C,iBAAA,IAAA,dAAUA;;AAErD,oCAAA,pCAAMC,gFAAoBC,GAAGN,EAAEC;AAA/B,AAAkC,QAAMK,GAAG,AAACH,kDAAgC,AAACD,eAAKF,OAAIC;;AAEtF,qCAAA,rCAAMM,kFACHD,GAAGN,EAAEC,EAAEO;AADV,AAEE,IAAAC,qBAAa,4FAAA,1FAAI,cAAAE,bAAUX,iCAAG,AAACY,8BAAmB,AAACC,oBAAUb,GAAGQ;AAAhE,AAAA,oBAAAC;AAAA,UAAAA,NAASC;AAAT,AACE,OAAiBJ,kBAAGI,IAAI,AAACR,eAAKF,GAAGC;;AACjC,OAAeK,gBAAG,AAACJ,eAAKF,GAAGC;;;AAE/B,wCAAA,xCAAMa,wFACHR,GAAGN,EAAEQ;AADR,AAEE,IAAAC,qBAAa,4FAAA,1FAAI,cAAAE,bAAUX,iCAAG,AAACY,8BAAmB,AAACC,oBAAUb,GAAGQ;AAAhE,AAAA,oBAAAC;AAAA,UAAAA,NAASC;AAAT,AACE,OAAoBJ,qBAAGI,IAAI,AAACR,eAAKF;;AACjC,OAAkBM,mBAAG,AAACJ,eAAKF;;;AAE/B,qCAAA,2CAAA,qDAAA,2CAAA,kDAAA,WAAAe,iBAAAC,iBAAAC,iBAAAC,hSAAKM;AAAL,AACe,yCAAAT,iBAAAC,iBAAAE,pEAACb;WADhB,qDAAA,2CAAA,kDAAA,WAAAc,iBAAAC,iBAAAC,iBAAAC,iBAAAC;AAAA,AAEe,oBAAAD;AAAO,0CAAAH,iBAAAC,iBAAAE,iBAAAC,tFAAChB;;AAA4B,6CAAAY,iBAAAC,iBAAAG,xEAACT;;;AAEpD,kCAAA,mFAAA,2CAAA,wDAAA,2CAAA,gDAAA,MAAA,qDAAA,gBAAA,qDAAA,6DAAA,2CAAA,wDAAA,2CAAA,oDAAA,QAAA,qDAAA,iFAAA,aAAA,sCAAA,qDAAA,6DAAA,2CAAA,wDAAA,2CAAA,oDAAA,QAAA,qDAAA,oBAAA,kDAAA,WAAAW,iBAAAC,iBAAAC,iBAAAC,x2CAAKC;AAAL,AAGkD,oBAAAD;AAAA,AAAS,AAAAH;;AAAY,OAAAA,8BAAAC,iBAAAE;;AAArB;;WAHlD,2CAAA,wDAAA,2CAAA,oDAAA,SAAA,qDAAA,iFAAA,uCAAA,qDAAA,6DAAA,2CAAA,wDAAA,2CAAA,oDAAA,SAAA,qDAAA,iFAAA,aAAA,0CAAA,qDAAA,6DAAA,2CAAA,wDAAA,2CAAA,oDAAA,WAAA,qDAAA,iFAAA,oCAAA,qDAAA;AAQA,gCAAA,hCAAME,wEACHC,KAAKC;AADR,AAEE,oBAAID;AACF,GACE,AAACE,qBAAKF;AAAM,OAACG,0BAAUH,KAAKC;;AAD9B,AAEQ,OAACG,6CAAEH,EAAED;;;;AAHf;;;AAMF,uCAAA,vCAAMK,sFACH5B,EAAE6B,GAAGC,IAAIC;AADZ,AAEE,iIAAA,xHAAK,AAACT,8BAAS,AAAA,8EAAKtB,GAAG6B,WAClB,AAACP,8BAAS,AAAA,kFAAMtB,GAAG8B,UACnB,AAACR,8BAAS,AAAA,mFAAOtB,GAAG+B;;AAE3B,yBAAA,zBAAMC,0DACHhC,EAAE6B,GAAGC,IAAIC;AADZ,AAEE,IAAMtC,IAAE,AAACwC,+CAAO,AAAA,8GAAqBjC,GAAGqB;IAClCa,IAAE,eAAA,WAAAC,1BAACC;AAAD,AAAO,IAAMC,IAAE,AAAA,sFAAAF;AAAR,AAAqB,GAAI,AAACP,qCAAgBS,EAAER,GAAGC,IAAI,AAACpC,eAAKqC;AAApCI;;AAAA;;GAA+C1C;AADnF,AAEE,GAAI,4BAAA,5BAACiC,0BAAUQ;AACb,IAAAI,eAAC,AAAA,mFAAOJ;AAAR,AAAA,QAAAI,6CAAAA,iFAAAA,tCAAWtB,6DAAAA;;AACXkB;;;AAEN,yCAAA,zCAAMK,0FACHzC,GAAGiC,KAAKS,GAAGC,GAAGzC;AADjB,AAGE,GAAI,EAAI,AAAC0C,2BAAaF,SAAI,AAACE,2BAAaD;AACtC,oBAAIA;AAAG,OAAC1C,mCAAeD,GAAGiC,KAAKU,GAAGzC;;AAAG,OAACM,sCAAkBR,GAAGiC,KAAK/B;;;AAChE,QAAMF,GAAGiC,QAAK,AAAClC,kCAAmBC,GAAGiC,KAAKU;;;AAE9C,iCAAA,jCAAME,0EACH7C,GAAGE,EAAE6B,GAAGC,IAAIC,KAAKS,GAAGC;AADvB,AAEE,IAAMP,IAAE,AAACF,uBAAQhC,EAAE6B,GAAGC,IAAIC;IACpBa,IAAE,iBAAAC,mBAAI,AAAA,gFAAKX;AAAT,AAAA,oBAAAW;AAAAA;;AAAYN;;;AADpB,AAEE,QAACK,kCAAAA,mDAAAA,nBAAE9C,+BAAAA,5BAAGiC,+BAAAA,1BAAKS,+BAAAA,5BAAGC,+BAAAA,5BAAGzC,+BAAAA","names":["p1__20924#","p2__20925#","p3__20926#","p4__20923#","hipo.attribute/style-handler","seq__20927","cljs.core/seq","chunk__20928","count__20929","i__20930","vec__20937","cljs.core.nth","temp__5804__auto__","cljs.core/chunked-seq?","c__5568__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__20940","cljs.core/first","cljs.core/next","k","v","cljs.core/name","hipo.attribute/property-name->js-property-name","n","hipo.attribute/set-property-value","el","hipo.attribute/set-attribute!","m","temp__5802__auto__","nns","cljs.core/Keyword","hipo.hiccup/key->namespace","cljs.core/namespace","hipo.attribute/remove-attribute!","p1__20952#","p2__20953#","p3__20955#","p4__20954#","p1__20957#","p2__20958#","p3__20960#","p4__20956#","p5__20959#","hipo.attribute/default-handler-fns","p1__20963#","p2__20964#","p3__20965#","p4__20962#","hipo.attribute/default-handlers","hipo.attribute/matches?","expr","s","cljs.core/set?","cljs.core/contains?","cljs.core._EQ_","hipo.attribute/target-matches?","ns","tag","attr","hipo.attribute/handler","cljs.core.concat","h","p1__20968#","cljs.core/some","t","fexpr__20969","hipo.attribute/default-set-value!","ov","nv","hipo.hiccup/literal?","hipo.attribute/set-value!","f","or__5045__auto__"],"sourcesContent":["(ns hipo.attribute\n  (:require [hipo.hiccup :as hic]))\n\n#?(:cljs\n(def style-handler {:target {:attr \"style\"} :fn #(doseq [[k v] %4] (aset %1 \"style\" (name k) v))}))\n\n(defn- property-name->js-property-name [n] (.replace n \"-\" \"_\"))\n\n(defn set-property-value [el k v] (aset el (property-name->js-property-name (name k)) v))\n\n(defn set-attribute!\n  [el k v m]\n  (if-let [nns (if (keyword? k) (hic/key->namespace (namespace k) m))]\n    (.setAttributeNS el nns (name k) v)\n    (.setAttribute el (name k) v)))\n\n(defn remove-attribute!\n  [el k m]\n  (if-let [nns (if (keyword? k) (hic/key->namespace (namespace k) m))]\n    (.removeAttributeNS el nns (name k))\n    (.removeAttribute el (name k))))\n\n(def default-handler-fns\n  {:prop {:fn #(set-property-value %1 %2 %4)}\n   :attr {:fn #(if %4 (set-attribute! %1 %2 %4 %5) (remove-attribute! %1 %2 %5))}})\n\n(def default-handlers\n  [{:target {:ns \"svg\" :attr \"class\"} :type :attr}\n   {:target {:tag \"input\" :attr #{\"value\" \"checked\"}} :type :prop}\n   {:target {:tag \"input\" :attr \"autofocus\"} :fn #(when %4 (.focus %1) (.setAttribute %1 %2 %4))}\n   {:target {:tag \"option\" :attr #{\"selected\"}} :type :prop}\n   {:target {:tag \"select\" :attr #{\"value\" \"selectIndex\"}} :type :prop}\n   {:target {:tag \"textarea\" :attr #{\"value\"}} :type :prop}])\n\n(defn matches?\n  [expr s]\n  (if expr\n    (cond\n      (set? expr) (contains? expr s)\n      :else (= s expr))\n    true))\n\n(defn target-matches?\n  [m ns tag attr]\n  (and (matches? (:ns m) ns)\n       (matches? (:tag m) tag)\n       (matches? (:attr m) attr)))\n\n(defn handler\n  [m ns tag attr]\n  (let [v (concat (:attribute-handlers m) default-handlers)\n        h (some #(let [t (:target %)] (if (target-matches? t ns tag (name attr)) %)) v)]\n    (if (contains? h :type)\n      ((:type h) default-handler-fns)\n      h)))\n\n(defn default-set-value!\n  [el attr ov nv m]\n  ; Set object via property access. Literal values are set via attribute access because associated properties might not exist.\n  (if (or (hic/literal? ov) (hic/literal? nv))\n    (if nv (set-attribute! el attr nv m) (remove-attribute! el attr m))\n    (aset el attr (set-property-value el attr nv))))\n\n(defn set-value!\n  [el m ns tag attr ov nv]\n  (let [h (handler m ns tag attr)\n        f (or (:fn h) default-set-value!)]\n    (f el attr ov nv m)))\n"]}