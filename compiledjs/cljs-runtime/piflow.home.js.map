{"version":3,"sources":["piflow/home.cljs"],"mappings":"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","names":["piflow.home/get-all-panes","cljs.core.into","p1__43530#","cljs.core.map","js/document","piflow.home/get-all-els","p1__43531#","cljs.core.filter","cljs.core/not","js/isNaN","cljs.core/last","p1__43532#","piflow.home/get-all-els-n-lines","cljs.core/some?","cljs.core/flatten","p1__43533#","cljs.core.conj","cljs.core/first","cljs.core/second","cljs.core/seq","js/window","piflow.home/get-all-lines","cljs.core.apply","cljs.core/concat","p1__43534#","piflow.home/remove-lines","id-numb","lines","to-remove","line","cljs.core/some","ti","cljs.core/count","vec__43535","cljs.core.nth","to-connect","d1-id","d2-id","linc-id","linc","piflow.home/draw-lines","to-draw","cljs.core.doall","iter__5523__auto__","s__43539","cljs.core/LazySeq","temp__5804__auto__","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","b__43541","cljs.core/chunk-buffer","i__43540","cljs.core/-nth","vec__43542","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__43538","cljs.core/chunk-rest","vec__43545","cljs.core/cons","cljs.core/rest","connector-color","connector-width","d1","d2","and__5043__auto__","piflow.home/remove-all-lines","flow-graph","si","vec__43548","pane-kw","pane-meta","pane-id","cljs.core/name","js/parseInt","clojure.string.split","piflow.home/draw-all-lines","vec__43551","piflow.home/update-pos","pane-graph","piflow.home/update-dims","piflow.home/character-notes","character","piflow.ui.fsty","e","p1__43554#","txt-id","txt-el","txt","fexpr__43555","cljs.core.keyword","nu-char-graph","cljs.core.assoc","nu-pane-graph","piflow.util.invoke","piflow.util/invoke","piflow.home/character-div","piflow.home/edit-button","piflow.ui/get-pane-id","piflow.home/update-notes","piflow.home/update-characters","el","characters","char-cont","s__43557","b__43559","i__43558","iter__43556","cont","piflow.dom/reset-div","piflow.home/pane-update-edit","edit-id","edit-txt-id","sb__5690__auto__","goog.string/StringBuffer","*print-newline*-orig-val__43560","cljs.core/*print-newline*","*print-fn*-orig-val__43561","cljs.core/*print-fn*","*print-newline*-temp-val__43562","*print-fn*-temp-val__43563","x__5691__auto__","cljs.pprint.pprint","G__43565","fexpr__43564","clojure.string/replace","piflow.home/pane-update","pane","G__43567","fexpr__43566","sty","cljs.core.subs","piflow.home/pane-update-all","vec__43568","piflow.home/update-pane-flow-graph-scale","scale","fexpr__43571","piflow.home/update-pane-flow-graph-dims","x","y","wid","hei","fexpr__43572","piflow.home/update-pane-flow-graph-pos","fexpr__43573","piflow.home/update-pane-flow-graph","*print-newline*-orig-val__43574","*print-fn*-orig-val__43575","*print-newline*-temp-val__43576","*print-fn*-temp-val__43577","piflow.home/numb-from-id","p1__43578#","piflow.home/pane-edit","p1__43579#","txt-edn","clojure.edn.read_string","cljs.core.println","piflow.home/new-flow-el","piflow.home/create-new-pane","fexpr__43580","piflow.home/graph-load","graph","pi","vec__43581","pane-seq","piflow.home/graph-edit","piflow.home/zoom-size","dt","win-wid","nu-wid","cljs.core.not_EQ_","piflow.home/page-home","piflow.ui/stripes","graph-pane","piflow.ui/footer","piflow.ui/new-pane-id","target-id","clojure.string/includes?","cljs.core._EQ_","cljs.core/chunk-first"],"sourcesContent":["(ns piflow.home\n      ;(with-out-str (cljs.pprint/pprint flow-graph))\n  (:require\n   [piflow.ui :as pui]\n   [piflow.util :as putil]\n   [piflow.dom :as pdom]\n   [clojure.edn :as cedn]\n   [clojure.string :as cstr]))\n(defn get-all-panes []\n  (into [] (map #(.-id %) (.querySelectorAll js/document \"[id^=\\\"pane_\\\"]\")))) ;; from DOM to include flow_graph\n\n(defn get-all-els\n  \"         (js/isNaN (last 'hazzah')) => true ;; h is NaN\n         (js/isNaN (last 'hazzah3')) => false ;; 3 is a number as a string literal\n\"\n  []\n  (into [] (filter #(not (js/isNaN (last %))) (map #(.-id %) (.querySelectorAll js/document \"[id^=\\\"pane_\\\"]\"))))) ;; from DOM to include flow_graph\n\n(defn get-all-els-n-lines []\n  (into [] (filter some? (flatten\n                          (map #(conj [(first %)]\n                                      (:lines (second %)))\n                               (seq\n                                (.-GLOB_flow_graph js/window))))))) ;; from global, only includes panes and lines\n\n(defn get-all-lines\n  []\n  (into [] (apply concat\n                  (map #(:lines (second %))\n                       (seq\n                        (.-GLOB_flow_graph js/window))))))\n\n(defn remove-lines\n  \"\n  id-numb : INT : integer value from the pane id\n  \"\n  [id-numb]\n  (let [lines (get-all-lines)\n        to-remove (filter some?\n                          (map\n                           (fn [line]\n                             (when (some #{id-numb} line)\n                               [(str \"pane_flow_\" (first line)) (str \"pane_flow_\" (second line))]))\n                           lines))]\n    (loop [ti 0]\n      (when (< ti (count to-remove))\n        (let [to-connect (nth to-remove ti)\n              [d1-id d2-id] to-connect ;; destr\n              linc-id (str d1-id \"_connect_\" d2-id)\n              linc (.getElementById js/document linc-id)]\n          ;; (when linc (.removeChild (.-parentNode linc) linc))) ;; valid cljs, but only runs for first element of to-remove\n          (if linc\n            (.removeChild (.-parentNode linc) linc))\n          (recur (inc ti)))))))\n\n(defn draw-lines\n  \"id-numb : INT : integer value from the pane id\"\n  [id-numb]\n  (let [lines (get-all-lines)\n        to-draw (filter some?\n                        (map\n                         (fn [line]\n                           (when (some #{id-numb} line)\n                             [(str \"pane_flow_\" (first line)) (str \"pane_flow_\" (second line))]))\n                         lines))]\n    (doall (for [to-connect to-draw\n                 :let [[d1-id d2-id] to-connect\n                       connector-color \"#aaa\" ;; aesthetically arbitrary, imagine configurable value\n                       connector-width 5 ;; aesthetically arbitrary, imagine configurable value\n                       d1 (.getElementById js/document d1-id)\n                       d2 (.getElementById js/document d2-id)]]\n             (do\n               (when (and d1 d2)\n                 (.connect js/window d1 d2 connector-color connector-width)))))))\n\n(defn remove-all-lines\n  []\n  (let [flow-graph (.-GLOB_flow_graph js/window)]\n    (loop [si 0]\n      (when (< si (count (seq flow-graph)))\n        (let [[pane-kw pane-meta] (nth (seq flow-graph) si)\n              pane-id (name pane-kw)\n              id-numb (js/parseInt (last (cstr/split pane-id \"_\")))]\n          (remove-lines id-numb)\n          (recur (inc si)))))))\n\n(defn draw-all-lines\n  []\n  (let [flow-graph (.-GLOB_flow_graph js/window)]\n    (loop [si 0]\n      (when (< si (count (seq flow-graph)))\n        (let [[pane-kw pane-meta] (nth (seq flow-graph) si)\n              pane-id (name pane-kw)\n              id-numb (js/parseInt (last (cstr/split pane-id \"_\")))]\n          (draw-lines id-numb)\n          (recur (inc si)))))))\n\n(comment \"\n;; get property\n(.-innerHTML el)\n(aget el 'innerHTML')\n;; set property\n(set! (.-innerHTML el) 'Hi!')\n(aset el 'innerHTML' 'Hi!')\nIn practice, use aget with aset or set! with .-attr form, but don't mix them. \nOtherwise closure name mangling may cause problem, in minified code.\")\n\n(defn update-pos\n  [pane-id pane-graph]\n  (->\n   js/document\n   (.getElementById pane-id)\n   (.-style)\n   (.-left)\n   (set! (str (first (:pos pane-graph)) \"px\")))\n  (->\n   js/document\n   (.getElementById pane-id)\n   (.-style)\n   (.-top)\n   (set! (str (second (:pos pane-graph)) \"px\")))\n  (->\n   js/document\n   (.getElementById pane-id)\n   (.-style)\n   (.-zIndex)\n   (set! (nth (:pos pane-graph) 2))))\n\n(defn update-dims\n  [pane-id pane-graph]\n  (->\n   js/document\n   (.getElementById pane-id)\n   (.-style)\n   (.-width)\n   (set! (str (first (:dims pane-graph)) \"px\")))\n  (->\n   js/document\n   (.getElementById pane-id)\n   (.-style)\n   (.-height)\n   (set! (str (second (:dims pane-graph)) \"px\"))))\n\n(defn character-notes\n  [pane-id character]\n  [:div (pui/fsty)\n     [:p\n      (conj (pui/fsty)\n            {:on-click (fn [e]\n                         (let [id-numb (js/parseInt (first (filter #(not (js/isNaN %)) (cstr/split pane-id #\"_\")))) ;; \"CONT_pane_flow_17_EDIT\"=>17\n                               txt-id (str \"txt_\" (name (first character)) \"_character\" pane-id)\n                               txt-el (.getElementById js/document txt-id)\n                               txt (.-value txt-el)\n                               flow-graph (.-GLOB_flow_graph js/window)\n                               pane-graph ((keyword pane-id) flow-graph)\n                               nu-char-graph (assoc (:char pane-graph) (first character) txt)\n                               nu-pane-graph (assoc pane-graph :char nu-char-graph)\n                               ]\n                           (remove-lines id-numb) \n                           (-> js/window (.-GLOB_flow_graph) (set! (assoc flow-graph (keyword pane-id) nu-pane-graph)))\n                           (putil/invoke \"piflow.home/pane-update\" pane-id)\n                           (putil/invoke \"piflow.home/pane-update-edit\" pane-id)\n                           (putil/invoke \"piflow.home/update-pane-flow-graph\")\n                           (draw-lines id-numb)))})\n      \"save\"]\n     [:textarea (conj (pui/fsty {:font-size :inherit})\n                      {:id (str \"txt_\" (name (first character)) \"_character\" pane-id)})\n    (second character)]])\n\n(defn character-div\n  [pane-id character]\n  [:div (conj (pui/fsty {:margin \"2px\"\n                         :border \"2px solid black\"})\n              {:id (str \"CHAR_\" (name (first character)) \"_BUTTON_\" pane-id)\n               :on-click (fn [e]\n                           (putil/invoke \"window.press_down\" e)\n                           (putil/invoke \"piflow.ui/ngpane-we\" e (str pane-id \"_NOTES_\" (name (first character)))\n                                         (character-notes pane-id character)\n                                         (.getElementById js/document \"flux\")))})\n   (name (first character))])\n\n(defn edit-button\n  [pane-id]\n  [:div (conj (pui/fsty {:width \"3em\" :height \"3em\"\n                         :color \"#eae\" :font-weight \"bolder\" :text-shadow \"1px 1px black\"\n                         :font-size \"1.2em\"\n                         :text-align \"center\"})\n              {:id (str \"EDIT_BUTTON_\" pane-id)\n               :on-click\n               (fn [e]\n                 (let [pane-id (pui/get-pane-id e)]\n                   (putil/invoke \"window.press_down\" e)\n                   (putil/invoke \"piflow.ui/ngpane-we\" e (str pane-id \"_EDIT\")\n                                 ;(pane-edit pane-id) \n                                 (putil/invoke \"piflow.home/pane-edit\" pane-id)\n                                 (.getElementById js/document \"flux\"))\n                   (.to_top js/window (str pane-id \"_EDIT\"))))})\n   \"edit\"])\n\n(defn update-notes\n  [pane-id pane-graph])\n\n(defn update-characters\n  [pane-id pane-graph]\n  (let [el (.getElementById js/document (str \"CONT_\" pane-id))\n        characters (seq (:char pane-graph))\n        char-cont (into [:div] (for [character characters]\n                                 (character-div pane-id character)))\n        cont [:div (pui/fsty)\n              (edit-button pane-id)\n              char-cont]]\n    (pdom/reset-div (str \"CONT_\" pane-id) cont)))\n\n(defn pane-update-edit\n  [pane-id]\n  (let [edit-id pane-id\n        edit-txt-id (str \"txt_\" edit-id)]\n      (->\n       js/document\n       (.getElementById edit-txt-id) ;; limits number of flow_graph panes to 1 unless given random unique ids\n       (.-value)\n       (set!\n        (->\n         (with-out-str (cljs.pprint/pprint ((keyword pane-id) (.-GLOB_flow_graph js/window))))\n         (cstr/replace \"\\\\n\" \"\\n\"))))))\n\n(defn pane-update\n  [pane-id]\n  (let [pane (.getElementById js/document pane-id)]\n    (when pane\n      (let [pane-graph ((keyword pane-id) (.-GLOB_flow_graph js/window))\n            sty (.-style pane)]\n        (update-characters pane-id pane-graph)\n        (when (:notes pane-graph)\n          (update-notes pane-id pane-graph))\n        (when (:pos pane-graph)\n          (update-pos pane-id pane-graph))\n        (when (:dims pane-graph)\n          (update-dims pane-id pane-graph))\n        (when (:scale pane-graph)\n          (->\n           js/document\n           (.getElementById pane-id)\n           (.-style)\n           (.-fontSize)\n           (set! (str (:scale pane-graph) \"em\"))))\n        (when (:fgc pane-graph)\n          (->\n           js/document\n           (.getElementById (str (subs pane-id 5) \"_title_bar\")) ;; (subs _ 5):\"pane-hazzah\"=>\"hazzah\"\n           (.-style)\n           (.-color)\n           (set! (:fgc pane-graph))))\n        (when (:bgc pane-graph)\n          (->\n           js/document\n           (.getElementById pane-id)\n           (.-style)\n           (.-backgroundColor)\n           (set! (:bgc pane-graph))))\n        (when (:title pane-graph)\n          (->\n           js/document\n           (.-innerHTML)\n           (set! (:title pane-graph))))))))\n\n(defn pane-update-all\n  []\n  (let [flow-graph (.-GLOB_flow_graph js/window)]\n    (loop [si 0]\n      (when (< si (count (seq flow-graph)))\n        (let [[pane-kw pane-meta] (nth (seq flow-graph) si)\n              pane-id (name pane-kw)]\n          (pane-update pane-id)\n          (recur (inc si)))))))\n\n(defn update-pane-flow-graph-scale\n  [pane-id scale]\n  (let [flow-graph (.-GLOB_flow_graph js/window)\n        pane-graph ((keyword pane-id) flow-graph)\n        nu-pane-graph (assoc pane-graph :scale scale)]\n    (-> js/window (.-GLOB_flow_graph) (set! (assoc flow-graph (keyword pane-id) nu-pane-graph)))))\n\n(defn update-pane-flow-graph-dims\n  [pane-id x y wid hei]\n  (let [flow-graph (.-GLOB_flow_graph js/window)\n        pane-graph ((keyword pane-id) flow-graph)\n        nu-pane-graph (assoc pane-graph :pos [x y 200]\n                             :dims [wid hei])]\n    (-> js/window (.-GLOB_flow_graph) (set! (assoc flow-graph (keyword pane-id) nu-pane-graph)))))\n\n(defn update-pane-flow-graph-pos\n  [pane-id x y]\n  (let [flow-graph (.-GLOB_flow_graph js/window)\n        pane-graph ((keyword pane-id) flow-graph)\n        nu-pane-graph (assoc pane-graph :pos [x y 200])]\n    (-> js/window (.-GLOB_flow_graph) (set! (assoc flow-graph (keyword pane-id) nu-pane-graph)))))\n\n(defn update-pane-flow-graph\n  []\n  (let [pane (.getElementById js/document \"pane_flow_graph\")]\n    (when pane\n      (->\n       js/document\n       (.getElementById \"txt_flow_graph\") ;; limits number of flow_graph panes to 1 unless given random unique ids\n       (.-value)\n       (set!\n        (->\n         (with-out-str (cljs.pprint/pprint (.-GLOB_flow_graph js/window)))\n         (cstr/replace \"\\\\n\" \"\\n\")))))))\n\n;; flow=>phlux\n(defn numb-from-id\n  \"\n  ex.\n    (numb-from-id 'CONT_pane_flow_17_EDIT_oth_11_e3')) => 17\n  \"\n  [pane-id]\n  (first (filter #(not (js/isNaN %)) (cstr/split pane-id #\"_\"))))\n\n(defn pane-edit\n  [pane-id]\n  (let [flow-graph (.-GLOB_flow_graph js/window)\n        pane-kw (keyword pane-id)\n                 ;(subs pane-id 0 (- (count pane-id) 5))) ;; remove last 5\n                 ;(subs pane-id 0 (- (count pane-id) 5))) ;; remove last 5\n        pane-graph (pane-kw flow-graph)]\n    [:div (conj (pui/fsty)\n                {:id (str \"CONT_\" pane-id \"_EDIT\")})\n     [:p\n      (conj (pui/fsty)\n            {:on-click (fn [e]\n                         (let [id-numb (js/parseInt\n                                        (first (filter #(not (js/isNaN %)) (cstr/split pane-id #\"_\")))\n                                         ;(nth (cstr/split pane-id #\"_\") 2)\n) ;; \"CONT_pane_flow_17_EDIT\"=>17\n                               txt-id (str \"txt_\" pane-id)\n                               txt-el (.getElementById js/document txt-id)\n                               txt (.-value txt-el)\n                               txt-edn (cedn/read-string txt)]\n                           (remove-lines id-numb) ;; need a (remove-all-lines ) && (draw-all-lines )\n                           ;(aset js/window \"GLOB_flow_graph\" (assoc flow-graph (keyword pane-id) txt-edn))\n                           (-> js/window (.-GLOB_flow_graph) (set! (assoc flow-graph (keyword pane-id) txt-edn)))\n                           ;(pane-update pane-id)\n                           (putil/invoke \"piflow.home/pane-update\" pane-id)\n                           (update-pane-flow-graph)\n                           (draw-lines id-numb)))})\n      \"save\"]\n     [:p pane-id]\n     [:textarea (conj (pui/fsty {:font-size :inherit})\n                      {:id (str \"txt_\" pane-id)\n                       :onclick (fn [e]\n                                  (println \"edit-onclick\" e))})\n      (str pane-graph)]]))\n\n(defn new-flow-el\n  [pane-id]\n  [:div (conj (pui/fsty)\n              {:id (str \"CONT_\" pane-id)})\n   (edit-button pane-id)])\n\n(defn create-new-pane\n  [pane-id e]\n  (let [flow-graph (.-GLOB_flow_graph js/window)]\n    (when (not ((keyword pane-id) flow-graph))\n      (aset js/window \"GLOB_flow_graph\" (assoc (.-GLOB_flow_graph js/window) (keyword pane-id) {})) ;; adding flow\n      )\n    (update-pane-flow-graph)\n    (putil/invoke \"piflow.ui/ngpane-we\" e pane-id (new-flow-el pane-id) (.getElementById js/document \"flux\"))))\n\n(defn graph-load\n  [graph e]\n  (loop [pi 0]\n    (when (< pi (count (seq graph)))\n      (let [pane-seq (nth (seq graph) pi)\n            [pane-kw pane-meta] pane-seq\n            pane-id (name pane-kw)\n            pane (.getElementById js/document pane-id)]\n        (when (not pane)\n          (create-new-pane (name pane-id) e))\n        (update-pane-flow-graph)\n        (pane-update pane-id)\n        (recur (inc pi))))))\n\n(defn graph-edit\n  [pane-id]\n  (let [flow-graph (.-GLOB_flow_graph js/window)]\n    [:div\n     [:p\n      (conj (pui/fsty)\n            {:on-click (fn [e]\n                         (let [id-numb (js/parseInt (last (cstr/split pane-id #\"_\")))\n                               txt-id (str \"txt_flow_graph\")\n                               txt-el (.getElementById js/document txt-id)\n                               txt (.-value txt-el)\n                               txt-edn (cedn/read-string txt)]\n                           (remove-all-lines)\n                           ;(aset js/window \"GLOB_flow_graph\" txt-edn)\n                           (-> js/window (.-GLOB_flow_graph) (set! txt-edn))\n                           (graph-load txt-edn e)\n                           (update-pane-flow-graph)\n                           (draw-all-lines)))})\n      \"save\"]\n     [:p \"flow graph\"]\n     [:textarea (conj (pui/fsty {:font-size :inherit})\n                      {:id (str \"txt_flow_graph\")\n                       :onclick (fn [e]\n                                  (println \"edit-onclick\" e))})\n      \"\"]]))\n\n(defn zoom-size\n  \"\n  pane-id : STR : pane id\n  dt : INT : delta of the pixel ratio\n  \"\n  [pane-id dt]\n  (let [win-wid (.-innerWidth js/window)\n        el (.getElementById js/document pane-id)\n        nu-wid (str (* dt (/ 1 (.-devicePixelRatio js/window))) \"em\")]\n    (when (not= nu-wid (.-fontSize (.-style el)))\n      (-> el\n          (.-style)\n          (.-fontSize)\n          (set! nu-wid)))))\n\n(defn page-home []\n  ;(reset! pui/nav-title-list [{:link \"piflow.ns/fn\" :title \"TITLE\"},{:   link \"piflow.ns/fn\" :title \"TITLE\"}])\n  [:div\n   (pui/stripes)\n   ;(pui/cont-nav-title)\n   [:div\n    (conj\n     (pui/fsty {:font-size \"2em\"\n                :-webkit-user-select :none; /* Safari */        \n                :-moz-user-select :none; /* Firefox */\n                :-ms-user-select :none; /* IE10+/Edge */\n                :user-select :none; /* Standard */\n                })\n     {:id \"flow_graph_add\"\n      :on-click (fn [e]\n                  (let [graph-pane (.getElementById js/document \"pane_flow_graph\")]\n                    (when (not graph-pane)\n                      (do\n                        (putil/invoke \"piflow.ui/ngpane-we\" e \"pane_flow_graph\" (graph-edit \"pane_flow-graph\") (.getElementById js/document \"flux\"))\n                        (update-pane-flow-graph)\n                        (zoom-size \"pane_flow_graph\" 1.3)))))})\n    \"\u22b6\"]\n   (pui/footer \"flow\")])\n\n(aset js/window \"GLOB_flow_graph\" {}) ;; create a js global\n(.addEventListener js/document \"dblclick\" (fn [e]\n                                            (let [pane-id (pui/new-pane-id \"flow\")]\n                                              (create-new-pane pane-id e))))\n\n(.addEventListener js/window \"resize\" (fn [e]\n                                        (zoom-size \"flow_graph_add\" 2)))\n\n(.addEventListener js/document \"click\" (fn [e]\n                                         (let [target-id (.-id (.-target e))]\n                                           ;(println \"TARG\" target-id)\n                                           (when (not (cstr/includes? target-id \"BUTTON\"))\n                                             (.to_top js/window (.get_match_id js/window e \"pane\")))\n                                           (when (= \"flux\" target-id)\n                                                ;(select-event e)\n                                             (println \"SNGL\" (.-id (.-target e))))\n                                              ;;(aset js/window \"GLOB_flow_graph\" (assoc (.-GLOB_flow_graph js/window) (keyword pane-id) {})) ;; adding flow\n                                              ;;(putil/invoke \"piflow.ui/ngpane-we\" e pane-id (new-flow-el pane-id) (.getElementById js/document \"flux\"))\n                                           )))\n"]}