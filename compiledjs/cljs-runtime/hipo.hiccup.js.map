{"version":3,"sources":["hipo/hiccup.cljc"],"mappings":"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","names":["hipo.hiccup/id-separator","hipo.hiccup/class-separator","hipo.hiccup/default-namespaces","hipo.hiccup/key->namespace","s","m","or__5045__auto__","cljs.core.get","hipo.hiccup/parse-tag-name","i","cljs.core.subs","j","hipo.hiccup/parse-id","hipo.hiccup/parse-classes","cs","hipo.hiccup/literal?","o","hipo.hiccup/node","v","cljs.core.nth","hipo.hiccup/keyns","h","cljs.core/namespace","hipo.hiccup/tag","cljs.core/name","hipo.hiccup/attributes","n","id","m?","cljs.core/map?","and__5043__auto__","cljs.core/contains?","cljs.core.ex_info","cljs.core.merge","temp__5802__auto__","c","hipo.hiccup/children","cljs.core/count","cljs.core.subvec","js/Error","hipo.hiccup/flattened?","cljs.core/vector?","cljs.core/empty?","cljs.core._EQ_","this__5330__auto__","writer__5331__auto__","opt__5332__auto__","cljs.core/-write","hipo.hiccup/Sentinel","hipo.hiccup/->Sentinel","hipo.hiccup/sentinel","hipo.hiccup/conjs!","cljs.core/seq","f","cljs.core/first","cljs.core.conj_BANG_","cljs.core/rest","%","hipo.hiccup/flatten-children","acc","cljs.core/transient","cljs.core/persistent!","cljs.core/seq?","hipo.hiccup/listener-name?","hipo.hiccup/listener-name->event-name","hipo.hiccup/classes","cljs.core.keep","cljs.core/identity","clojure.string/trim","clojure.string.join"],"sourcesContent":["(ns hipo.hiccup\n  (:require [clojure.string :as string]))\n\n(def ^:private id-separator \"#\")\n(def ^:private class-separator \".\")\n\n(def ^:private default-namespaces {\"svg\" \"http://www.w3.org/2000/svg\"\n                                   \"xlink\" \"http://www.w3.org/1999/xlink\"})\n\n(defn key->namespace\n  [s m]\n  (if s\n    (or (get (:namespaces m) s) (get default-namespaces s))))\n\n(defn parse-tag-name\n  [s]\n  (let [i (.indexOf s id-separator)]\n    (if (pos? i)\n      (subs s 0 i)\n      (let [j (.indexOf s class-separator)]\n        (if (pos? j)\n          (subs s 0 j)\n          s)))))\n\n(defn parse-id\n  [s]\n  (let [i (.indexOf s id-separator)]\n    (if (pos? i)\n      (let [j (.indexOf s class-separator)]\n        (if (pos? j)\n          (subs s (inc i) j)\n          (subs s (inc i)))))))\n\n(defn parse-classes\n  [s]\n  (let [i (.indexOf s class-separator)]\n    (if (pos? i); First locate the class part\n      (let [cs (subs s (inc i))]\n        (loop [s cs] ; Then convert from 'a.b.c' to 'a b c'\n          (let [i (.indexOf s class-separator)]\n            (if (pos? i)\n              ; Replace with string in a loop is more efficient than replace with global regex\n              (recur (.replace s class-separator \" \"))\n              s)))))))\n\n(defn literal?\n  [o]\n  (or (string? o) (number? o) (true? o) (false? o)))\n\n(defn node\n  [v]\n  (nth v 0))\n\n(defn keyns\n  [h]\n  (namespace (node h)))\n\n(defn tag\n  [v]\n  (parse-tag-name (name (node v))))\n\n(defn attributes\n  [v]\n  (if v\n    (let [n (name (node v))\n          id (parse-id n)\n          cs (parse-classes n)\n          m? (nth v 1 nil)]\n      (if (map? m?)\n        (if (and id (contains? m? :id))\n          (throw (ex-info \"Cannot define id multiple times\" {}))\n          (if (or id cs)\n            (merge m? (if id {:id id}) (if cs {:class (if-let [c (:class m?)] (if cs (str cs \" \" c) (str c)) cs)}))\n            m?))\n        (if (or id cs)\n          {:id id :class cs})))))\n\n(defn children\n  [v]\n  (let [i (if (map? (nth v 1 nil)) 2 1)]\n    (if (> (count v) i)\n      (subvec v i))))\n\n(defn flattened?\n  [v]\n  {:pre [(or (nil? v) (vector? v))]}\n  (if (empty? v)\n    true\n    (let [c (dec (count v))]\n      (loop [i 0]\n        (let [o (nth v i)]\n          (if (or (literal? o) (vector? o))\n            (if (= c i)\n              true\n              (recur (inc i)))\n            false))))))\n\n(deftype Sentinel [])\n(def ^:private sentinel (Sentinel.))\n\n(defn conjs!\n  [v s]\n  (if (seq s)\n    (recur (let [f (first s)] (if (or (literal? f) (vector? f)) (conj! v f) (conjs! v f))) (rest s))\n    v))\n\n(defn flatten-children\n  [v]\n  {:pre [(or (nil? v) (vector? v))]\n   :post [(or (nil? v) (vector? v))]}\n  (if (flattened? v)\n    v\n    (loop [acc (transient [])\n           v v]\n      (let [f (nth v 0 sentinel)]\n        (if (identical? sentinel f)\n          (persistent! acc)\n          (recur\n            (cond\n              (seq? f) (conjs! acc f)\n              (not (nil? f)) (conj! acc f)\n              :else acc)\n            (subvec v 1)))))))\n\n(defn listener-name?\n  [s]\n  #?(:clj (.startsWith s \"on-\"))\n  #?(:cljs (identical? 0 (.indexOf s \"on-\"))))\n\n(defn listener-name->event-name\n  [s]\n  (if (listener-name? s)\n    (subs s 3)))\n\n(defn classes\n  [s]\n  (let [s (keep identity s)]\n    (if-not (empty? s)\n      (string/trim (string/join \" \" s)))))\n"]}