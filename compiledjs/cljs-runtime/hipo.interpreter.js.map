{"version":3,"sources":["hipo/interpreter.cljs"],"mappings":"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","names":["p__21016","map__21017","cljs.core/--destructure-map","cljs.core.get","hipo.interpreter/set-attribute!","el","ns","tag","sok","ov","nv","interceptors","m","temp__5802__auto__","en","hipo.hiccup/listener-name->event-name","cljs.core/name","cljs.core/map?","b__20832__auto__","v__20833__auto__","cljs.core/not","cljs.core/empty?","hipo.interceptor/call","cljs.core.merge","hn","l","temp__5804__auto__","or__5045__auto__","hipo.attribute/set-value!","js/Error","hipo.interpreter/append-children!","v","cljs.core/vector?","hipo.hiccup/flatten-children","h","cljs.core.nth","hipo.interpreter/create-child","cljs.core/rest","hipo.interpreter/default-create-element","attrs","hipo.dom/create-element","seq__21028","cljs.core/seq","chunk__21029","count__21030","i__21031","vec__21040","cljs.core/chunked-seq?","c__5568__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__21044","cljs.core/first","cljs.core/next","hipo.interpreter/create-element","f","hipo.interpreter/create-vector","key","hipo.hiccup/keyns","hipo.hiccup/tag","hipo.hiccup/attributes","children","hipo.hiccup/children","hipo.hiccup/key->namespace","o","hipo.hiccup/literal?","js/document","hipo.interpreter/append-to-parent","cljs.core/seq?","cljs.core/vec","hipo.interpreter/create","hipo.interpreter/reconciliate-attributes!","om","nm","seq__21058","chunk__21060","count__21061","i__21062","vec__21071","vec__21081","seq__21084","chunk__21085","count__21086","i__21087","clojure.set.difference","cljs.core/set","cljs.core/keys","hipo.interpreter/child-key","cljs.core/meta","hipo.interpreter/keyed-children->indexed-map","cljs.core.into","iter__5523__auto__","s__21092","cljs.core/LazySeq","c__5521__auto__","size__5522__auto__","b__21094","cljs.core/chunk-buffer","i__21093","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__21091","cljs.core/cons","ih","cljs.core.map_indexed","idx","itm","p__21096","map__21097","hipo.interpreter/reconciliate-keyed-children!","och","nch","cs","hipo.dom.children","cljs.core.apply","cljs.core/max","clojure.set.intersection","seq__21108","chunk__21109","count__21110","i__21111","vec__21149","vec__21152","vec__21161","vec__21164","i","ii","vec__21157","vec__21168","iii","oh","cel","hipo.interpreter/reconciliate!","ncel","hipo.dom/insert-child!","d","hipo.dom/remove-trailing-children!","p__21179","map__21180","hipo.interpreter/reconciliate-non-keyed-children!","oc","nc","n__5636__auto__","x__5133__auto__","y__5134__auto__","hipo.dom/remove-child!","hipo.dom/child","cljs.core.subvec","hipo.interpreter/keyed-children?","p__21194","map__21195","hipo.interpreter/reconciliate-children!","hipo.dom/clear!","p__21213","map__21215","hipo.interpreter/reconciliate-vector!","nh","nel","hipo.dom/replace!","p__21219","map__21220","hipo.dom/replace-text!"],"sourcesContent":["(ns hipo.interpreter\n  (:require [clojure.set :as set]\n            [hipo.attribute :as attr]\n            [hipo.dom :as dom]\n            [hipo.hiccup :as hic]\n            [hipo.interceptor :refer-macros [intercept]]))\n\n(defn set-attribute!\n  [el ns tag sok ov nv {:keys [interceptors] :as m}]\n  (if-not (identical? ov nv)\n    (if-let [en (hic/listener-name->event-name (name sok))]\n      (if-not (and (map? ov) (map? nv)\n                   (identical? (:name ov) (:name nv)))\n        (intercept interceptors (if nv :update-handler :remove-handler) (merge {:target el :name sok :old-value ov} (if nv {:new-value nv}))\n          (let [hn (str \"hipo_listener_\" en)]\n            (if-let [l (aget el hn)]\n              (.removeEventListener el en l))\n            (when-let [nv (or (:fn nv) nv)]\n              (.addEventListener el en nv)\n              (aset el hn nv)))))\n    (intercept interceptors (if nv :update-attribute :remove-attribute) (merge {:target el :name sok :old-value ov} (if nv {:new-value nv}))\n      (attr/set-value! el m ns tag sok ov nv)))))\n\n(declare create-child)\n\n(defn append-children!\n  [el v m]\n  {:pre [(vector? v)]}\n  (loop [v (hic/flatten-children v)]\n    (when-not (empty? v)\n      (if-let [h (nth v 0)]\n        (.appendChild el (create-child h m)))\n      (recur (rest v)))))\n\n(defn default-create-element\n  [ns tag attrs m]\n  (let [el (dom/create-element ns tag)]\n    (doseq [[sok v] attrs]\n      (if v\n        (set-attribute! el ns tag sok nil v m)))\n    el))\n\n(defn create-element\n  [ns tag attrs m]\n  (if-let [f (:create-element-fn m)]\n    (f ns tag attrs m)\n    (default-create-element ns tag attrs m)))\n\n(defn create-vector\n  [h m]\n  {:pre [(vector? h)]}\n  (let [key (hic/keyns h)\n        tag (hic/tag h)\n        attrs (hic/attributes h)\n        children (hic/children h)\n        el (create-element (hic/key->namespace key m) tag attrs m)]\n    (if children\n      (append-children! el children m))\n    el))\n\n(defn create-child\n  [o m]\n  {:pre [(or (hic/literal? o) (vector? o))]}\n  (if (hic/literal? o) ; literal check is much more efficient than vector check\n    (.createTextNode js/document o)\n    (create-vector o m)))\n\n(defn append-to-parent\n  [el o m]\n  (cond\n    (seq? o) (append-children! el (vec o) m)\n    (not (nil? o)) (.appendChild el (create-child o m))))\n\n(defn create\n  [o m]\n  (cond\n    (seq? o)\n    (let [f (.createDocumentFragment js/document)]\n      (append-children! f (vec o) m)\n      f)\n    (not (nil? o)) (create-child o m)))\n\n; Reconciliate\n\n(defn reconciliate-attributes!\n  [el ns tag om nm m]\n  (doseq [[sok nv] nm\n          :let [ov (get om sok)]]\n    (set-attribute! el ns tag sok ov nv m))\n  (doseq [sok (set/difference (set (keys om)) (set (keys nm)))]\n    (set-attribute! el ns tag sok (get om sok) nil m)))\n\n(declare reconciliate!)\n\n(defn- child-key [h] (:hipo/key (meta h)))\n(defn- keyed-children->indexed-map [v] (into {} (for [ih (map-indexed (fn [idx itm] [idx itm]) v)] [(child-key (nth ih 1)) ih])))\n\n(defn reconciliate-keyed-children!\n  \"Reconciliate a vector of children based on their associated key.\"\n  [el och nch {:keys [interceptors] :as m}]\n  (let [om (keyed-children->indexed-map och)\n        nm (keyed-children->indexed-map nch)\n        ; TODO reduce set calculation\n        cs (dom/children el (apply max (set/intersection (set (keys nm)) (set (keys om)))))]\n    ; Iterate over new elements looking for matching (same key) in old vector\n    ; TODO strategy is not optimale when removing first element. should remove first based on some threshold\n    (doseq [[i [ii h]] nm]\n      (if-let [[iii oh] (get om i)]\n        (let [cel (nth cs iii)]\n          ; existing node\n          (if (identical? ii iii)\n            ; node kept its position; reconciliate\n            (reconciliate! cel oh h m)\n            ; node changed location; detach, reconciliate and insert at the right location\n            (intercept interceptors :move {:target el :value h :index ii}\n              (let [ncel (.removeChild el cel)]\n                (reconciliate! ncel oh h m)\n                (dom/insert-child! el ii ncel)))))\n        ; new node; insert it at current index\n        (intercept interceptors :insert {:target el :value h :index ii}\n          (dom/insert-child! el ii (create-child h m)))))\n    ; All now useless nodes have been pushed at the end; remove them\n    (let [d (count (set/difference (set (keys om)) (set (keys nm))))]\n      (if (pos? d)\n        (intercept interceptors :remove-trailing {:target el :count d}\n          (dom/remove-trailing-children! el d))))))\n\n(defn reconciliate-non-keyed-children!\n  [el och nch {:keys [interceptors] :as m}]\n  (let [oc (count och)\n        nc (count nch)\n        d (- oc nc)]\n    ; Remove now unused elements if (count och) > (count nch)\n    (if (pos? d)\n      (intercept interceptors :remove-trailing {:target el :count d}\n        (dom/remove-trailing-children! el d)))\n    ; Assume children are always in the same order i.e. an element is identified by its position\n    ; Reconciliate all existing node\n    (dotimes [i (min oc nc)]\n      (let [ov (nth och i)\n            nv (nth nch i)]\n        (if-not (and (nil? ov) (nil? nv))\n          ; Reconciliate value unless previously nil (insert) or newly nil (remove)\n          (cond\n            (nil? ov)\n            (intercept interceptors :insert {:target el :value nv :index i}\n              (dom/insert-child! el i (create-child nv m)))\n            (nil? nv)\n            (intercept interceptors :remove {:target el :index i}\n              (dom/remove-child! el i))\n            :else\n            (if-let [cel (dom/child el i)]\n              (reconciliate! cel ov nv m))))))\n    ; Create new elements if (count nch) > (count oh)\n    (if (neg? d)\n      (if (identical? -1 d)\n        (if-let [h (nth nch oc)]\n          (intercept interceptors :append {:target el :value h}\n            (.appendChild el (create-child h m))))\n        (let [f (.createDocumentFragment js/document)\n              cs (if (identical? 0 oc) nch (subvec nch oc))]\n          ; An intermediary DocumentFragment is used to reduce the number of append to the attached node\n          (intercept interceptors :append {:target el :value cs}\n            (append-children! f cs m))\n          (.appendChild el f))))))\n\n(defn keyed-children? [v] (not (nil? (child-key (nth v 0)))))\n\n(defn reconciliate-children!\n  [el och nch {:keys [interceptors] :as m}]\n  (if (empty? nch)\n    (if-not (empty? och)\n      (intercept interceptors :clear {:target el}\n        (dom/clear! el)))\n    (if (keyed-children? nch)\n      (reconciliate-keyed-children! el och nch m)\n      (reconciliate-non-keyed-children! el och nch m))))\n\n(defn reconciliate-vector!\n  [el oh nh {:keys [interceptors] :as m}]\n  {:pre [(vector? nh)]}\n  (if (or (hic/literal? oh) (not (identical? (hic/tag nh) (hic/tag oh))))\n    (let [nel (create-child nh m)]\n      (intercept interceptors :replace {:target el :value nh}\n        (assert (.-parentElement el) \"Can't replace root element. If you want to change root element's type it must be encapsulated in a static element.\")\n        (dom/replace! el nel)))\n    (let [om (hic/attributes oh)\n          nm (hic/attributes nh)\n          och (hic/children oh)\n          nch (hic/children nh)]\n      (intercept interceptors :reconciliate {:target el :old-value och :new-value nch}\n        (reconciliate-children! el (hic/flatten-children och) (hic/flatten-children nch) m))\n      (reconciliate-attributes! el (hic/keyns nh) (hic/tag nh) om nm m))))\n\n(defn reconciliate!\n  [el oh nh {:keys [interceptors] :as m}]\n  {:pre [(or (vector? nh) (hic/literal? nh))\n         (or (nil? m) (map? m))]}\n  (intercept interceptors :reconciliate {:target el :old-value oh :new-value nh}\n    (if (hic/literal? nh) ; literal check is much more efficient than vector check\n      (if-not (identical? oh nh)\n        (intercept interceptors :replace {:target el :value nh}\n          (assert (.-parentElement el) \"Can't replace root element. If you want to change root element's type it must be encapsulated in a static element.\")\n          (dom/replace-text! el (str nh))))\n      (reconciliate-vector! el oh nh m))))\n"]}