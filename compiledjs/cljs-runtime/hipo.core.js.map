{"version":3,"sources":["hipo/core.cljs"],"mappings":";AAKA,4BAAA,5BAAeA;AAEf,uBAAA,vBAAMC,sDAAYC;AAAlB,AAAsB,QAAMA,GAAGF;;AAE/B,6BAAA,7BAAMG,kEACHD,GAAGE;AADN,AAEE,QAAMF,GAAGF,6BAAgBI;;AAE3B,AAAA;;;;;;;;;;;;;;;+BAAA,uCAAAC,tEAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,2DAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,2DAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,2DAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,6DAAA,7DAAMD,wEAcFL,GAAGO;AAdP,AAcW,wEAAA,jEAACC,2DAAcR,GAAGO;;;AAd7B,CAAA,6DAAA,7DAAMF,wEAeFL,GAAGO,GAAGE;AAfV,AAea,OAACD,2DAAcR,GAAG,AAACD,qBAAWC,IAAIO,GAAGE;;;AAflD,CAAA,6DAAA,7DAAMJ,wEAgBFL,GAAGU,GAAGH,GAAGE;AAhBb,AAiBI,GAAQ,GAAK,OAAA,NAAMC;AAAnB;AAAA,AAAA,MAAA,KAAAJ,MAAA,CAAA,kBAAA,+BAAA,KAAA;;;AACA,AAACL,2BAAYD,GAAGO;;AAChB,OAACI,oCAAiBX,GAAGU,GAAGH,GAAGE;;;AAnB/B,CAAA,uDAAA,vDAAMJ;;AAAN","names":["hipo.core/hiccup-property","hipo.core/get-hiccup","el","hipo.core/set-hiccup!","h","var_args","G__21939","hipo.core/reconciliate!","js/Error","nh","hipo.core.reconciliate_BANG_","m","oh","hipo.interpreter/reconciliate!"],"sourcesContent":["(ns hipo.core\n  (:require [hipo.interceptor]\n            [hipo.interpreter :as hi])\n  (:require-macros hipo.core))\n\n(def ^:private hiccup-property \"hipo_hiccup\")\n\n(defn get-hiccup [el] (aget el hiccup-property))\n\n(defn set-hiccup!\n  [el h]\n  (aset el hiccup-property h))\n\n(defn reconciliate!\n  \"Reconciliate an existing DOM element to match an hiccup style vector.\n   Reconciliation works by diffing the hiccup used to create the DOM element with a new hiccup. Element created with `hipo.core/create` can be reconcilied without providing the previous hiccup.\n   Last argument is an optional map of options.\n\n   Options:\n\n   * force-compilation? fail create if DOM construction can't be fully compiled\n   * force-interpretation? bypass the DOM construction compilation\n   * create-element-fn\n   * namespaces\n   * attribute-handlers\n   * interceptors\n  \"\n  ([el nh] (reconciliate! el nh {}))\n  ([el nh m] (reconciliate! el (get-hiccup el) nh m))\n  ([el oh nh m]\n    (assert (not (nil? oh)) \"Previous hiccup can't be nil\")\n    (set-hiccup! el nh)\n    (hi/reconciliate! el oh nh m)))\n"]}